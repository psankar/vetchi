---
# Vetchi OpenAPI Specification
# Remember to sort this yaml file alphabetically by keys after making changes
components:
  securitySchemes:
    HubAuth:
      type: http
      scheme: bearer
      bearerFormat: string
    TFAuth:
      type: http
      scheme: bearer
      bearerFormat: string

    ### Hub things above

    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants admin access

  schemas:
    LoginRequest:
      description: Request to login
      properties:
        email:
          type: string
          format: email
          description: The email address to use for authentication
        password:
          type: string
          description: The password for the email address
      type: object
      required:
        - email
        - password
    LoginResponse:
      properties:
        tfa_token:
          type: string
          description: The token for TFA
        valid_till:
          type: string
          format: date-time
          description: The time till when the token is valid
    TFAuthRequest:
      properties:
        tfa_code:
          type: string
          description: The code from the TFA email
      type: object
      required:
        - tfa_code
    TFAuthResponse:
      properties:
        session_token:
          type: string
          description: The token for the session
        valid_till:
          type: string
          format: date-time
          description: The time till when the token is valid
    AutoBiography:
      properties:
        name_en:
          type: string
          description: The name of the user
          minLength: 1
          maxLength: 128
        about_me:
          type: string
          description: The about me of the user
          minLength: 1
          maxLength: 1024
        websites:
          type: array
          description: The websites of the user
          items:
            type: string
            format: url
            minLength: 1
            maxLength: 255
        names_in_other_languages:
          type: array
          description: The names of the user in other languages
          items:
            type: object
            properties:
              language:
                type: string
                description: Should be a valid IETF BCP 47 language tag.
              name:
                type: string
                description: The name of the user in the given language
      type: object
      required:
        - name
        - about_me
    VetchiHandle:
      properties:
        handle:
          type: string
          description: The vetchi handle of the user
          minLength: 6 # May be shorter in future
          maxLength: 32
          pattern: "^[a-zA-Z0-9_-]+$"
      type: object
      required:
        - handle
    GetWorkHistoryRequest:
      description: Request to get the work history for the logged in user
      properties:
        language_id:
          type: string
          description: The language code for the language on which the work history should be fetched. Should be a valid IETF BCP 47 language tag. If the company has not set a name for the requested language, then the name in the default language of the company will be returned.
      type: object
    WorkHistory:
      properties:
        work_history_id:
          type: string
          description: The ID of the work history
        company_name:
          type: string
          description: The name of the company in the requested language in the GetWorkHistoryRequest. If the company name is not set for the requested language, then the name in the default language of the company will be returned.
        job_title:
          type: string
          description: The job title
        start_date:
          type: string
          format: date
          description: The start date of the job
        end_date:
          type: string
          format: date
          description: The end date of the job
        logo:
          type: string
          format: url
          description: The logo of the company
      type: object
    AddWorkHistoryRequest:
      description: Request to add a new work history for the logged in user
      properties:
        company_handle:
          type: string
          description: The handle of the company within Vetchi. This is a unique identifier for the company and is used in the API. This is different from the company_name used in the UI and should not be confused with the company_id which is used in the database.
        job_title:
          type: string
          description: The job title
        start_date:
          type: string
          format: date
          description: The start date of the job
        end_date:
          type: string
          format: date
          description: The end date of the job. If not passed, it will be considered as current job. There can be multiple current jobs for a user.
      type: object
      required:
        - company_handle
        - job_title
        - start_date
    AddWorkHistoryResponse:
      properties:
        work_history_id:
          type: string
          description: The ID of the newly created work history
      type: object
    RemoveWorkHistoryRequest:
      description: Request to remove a work history for the logged in user
      properties:
        work_history_id:
          type: string
          description: The ID of the work history to remove
      type: object
    UpdateWorkHistoryRequest:
      description: Request to update a work history for the logged in user
      properties:
        work_history_id:
          type: string
          description: The ID of the work history to update
        company_handle:
          type: string
          description: The handle of the company within Vetchi. This is a unique identifier for the company and is used in the API. This is different from the company_name used in the UI and should not be confused with the company_id which is used in the database.
        job_title:
          type: string
          description: The job title
        start_date:
          type: string
          format: date
          description: The start date of the job
        end_date:
          type: string
          format: date
          description: The end date of the job. If not passed, it will be considered as current job. There can be multiple current jobs for a user.
      type: object
      required:
        - work_history_id
        - company_handle
        - job_title
        - start_date
    UpdateWorkHistoryResponse:
      properties:
        work_history_id:
          type: string
          description: The ID of the updated work history
      type: object

    ### Hub things above

    ResetPasswordRequest:
      description: Request to reset the password
      properties:
        token:
          type: string
          description: The token to reset the password
        new_password:
          type: string
          description: The new password
    ForgotPasswordRequest:
      description: Request to send a password reset
      properties:
        email:
          type: string
          format: email
          description: The email address associated with the account for which the password needs to be reset
      type: object
    ChangePasswordRequest:
      description: Change the password for the currently logged in user
      properties:
        old_password:
          description: The old password
          $ref: "#/components/schemas/Password"
        new_password:
          description: The new password
          $ref: "#/components/schemas/Password"
      type: object
    CancelInterviewRequest:
      description: Cancel an Interview for a given interview_id.
      properties:
        interview_id:
          type: string
          description: The interview ID
        send_cancellation_to_candidate:
          type: boolean
          default: false
          description: Whether to send a cancellation notice to the candidate
        cancellation_body:
          type: string
          description: The body of the cancellation notice. Only sent if send_cancellation_to_candidate is set to true. In future, could come from a mail template.
          minLength: 10
          maxLength: 1000
      type: object
    UpdateInterviewFeedbackRequest:
      description: Update the feedback for an Interview. This will change the status of the Interview to COMPLETED and the evaluation_status to EVALUATION_COMPLETED.
      properties:
        interview_id:
          type: string
          description: The interview ID
        evaluation_report:
          $ref: "#/components/schemas/EvaluationReport"
        evaluation_result:
          $ref: "#/components/schemas/EvaluationResult"
        feedback_to_candidate:
          type: string
          description: The feedback that should be shared with the candidate
          minLength: 10
          maxLength: 1000
    GetInterviewDetailsRequest:
      description: Get Interview details
      properties:
        interview_id:
          type: string
          description: The interview ID
      type: object
    InterviewDetails:
      description: Details of an interview
      properties:
        interview_id:
          type: string
          description: The interview ID
        interview_status:
          type: string
          description: The status of the interview
        openings:
          type: array
          description: List of openings for the interview
          items:
            $ref: "#/components/schemas/ShortlistedOpening"
        candidacy_id:
          type: string
          description: The candidacy ID
        start_time:
          type: string
          format: date-time
          description: The start time of the interview
        end_time:
          type: string
          format: date-time
          description: The end time of the interview
        candidate_name:
          type: string
          description: The name of the candidate
        candidate_current_company:
          type: string
          description: The current company of the candidate
        interviewers:
          type: array
          description: List of interviewers
          items:
            $ref: "#/components/schemas/User"
        evaluation_status:
          $ref: "#/components/schemas/EvaluationStatus"
        evaluation_report:
          $ref: "#/components/schemas/EvaluationReport"
        evaluation_result:
          $ref: "#/components/schemas/EvaluationResult"
        feedback_to_candidate:
          type: string
          description: The feedback that should be shared with the candidate
          minLength: 10
          maxLength: 1000
    CreateInterviewResponse:
      description: Response after creating an interview
      properties:
        interview_id:
          type: string
          description: The interview ID
      type: object
    CreateInterviewRequest:
      description: Request to create a new interview
      properties:
        candidacy_id:
          type: string
          description: The candidacy ID
        interviewers:
          type: array
          description: List of interviewers
          items:
            $ref: "#/components/schemas/User"
        start_time:
          type: string
          format: date-time
          description: The start time of the interview
        end_time:
          type: string
          format: date-time
          description: The end time of the interview. The duration between start_time and end_time will be the duration and cannot be more than 8 hours.
        send_appointment:
          type: boolean
          default: false
          description: Whether to send an appointment confirmation to the candidate
        interview_appointment_body:
          type: string
          description: The body of the interview appointment confirmation. Only sent if send_appointment is set to true. In future, could come from a mail template.
          minLength: 10
          maxLength: 1000
      type: object
    GetCandidacyRequest:
      description: Request to get a candidacy
      properties:
        candidacy_id:
          type: string
          description: The candidacy ID
      required:
        - candidacy_id
    Candidacy:
      description: Candidacy
      properties:
        candidacy_id:
          type: string
          description: The candidacy ID
        name:
          type: string
          description: The candidate name
        last_position:
          type: string
          description: The candidate's last position
        last_company:
          type: string
          description: The candidate's last company
        shortlisted_openings:
          type: array
          description: List of openings the candidate has been shortlisted for
          items:
            $ref: "#/components/schemas/ShortlistedOpening"
        interviews:
          type: array
          description: List of interviews for the candidacy
          items:
            $ref: "#/components/schemas/Interview"
      type: object
    Interview:
      description: Interview
      properties:
        interview_id:
          type: string
          description: The interview ID
        status:
          $ref: "#/components/schemas/InterviewStatus"
          description: The interview status
        interviewers:
          type: array
          description: List of interviewers
          items:
            $ref: "#/components/schemas/User"
        at:
          type: string
          format: date-time
          description: The date and time of the interview
        evaluation_status:
          $ref: "#/components/schemas/EvaluationStatus"
        evaluation_report:
          description: The evaluation report
          type: string
        evaluation_result:
          description: The evaluation result
          $ref: "#/components/schemas/EvaluationResult"
      type: object
    EvaluationResult:
      type: string
      enum:
        - STRONG_YES
        - YES
        - NO
        - STRONG_NO
    EvaluationStatus:
      type: string
      enum:
        - EVALUATION_PENDING
        - EVALUATION_COMPLETED
    EvaluationReport:
      type: object
      properties:
        positives:
          type: string
          description: The positives of the applicant
          minLength: 10
          maxLength: 2048
        negatives:
          type: string
          description: The negatives of the applicant
          minLength: 10
          maxLength: 2048
        summary:
          type: string
          description: The summary of the evaluation report
          minLength: 10
          maxLength: 2048
    InterviewStatus:
      type: string
      enum:
        - SCHEDULED
        - COMPLETED
        - CANCELLED
    FilterCandidatesRequest:
      description: Request to get a list of Candidates across multiple openings.
      properties:
        search_prefix:
          type: string
          description: The prefix for case insensitive search on either the Applicant name or the last Employer name
          example: jeff google
        offset:
          type: string
          description: The candidate_id to start the list from
        limit:
          type: integer
          description: Number of candidates to return
          minimum: 1
          maximum: 100
          default: 50
    FilteredCandidate:
      description: A candidate that matches the filters
      properties:
        candidacy_id:
          type: string
          description: The candidacy ID
        name:
          type: string
          description: The candidate name
        lastPosition:
          type: string
          description: The candidate's last position
        lastCompany:
          type: string
          description: The candidate's last company
        shortlistedOpenings:
          type: array
          description: List of openings the candidate has been shortlisted for
          items:
            $ref: "#/components/schemas/ShortlistedOpening"
    ShortlistedOpening:
      description: An opening that the candidate has been shortlisted for
      properties:
        id:
          type: string
          description: The opening ID
        title:
          type: string
        hiring_manager_name:
          type: string
          description: The hiring manager name
        hiring_manager_email:
          type: string
          format: email
          description: The hiring manager email
        recruiter_name:
          type: string
          description: The recruiter name
        recruiter_email:
          type: string
          format: email
          description: The recruiter email
    ShortlistApplicationRequest:
      description: Request to Shortlist an Application
      properties:
        application_id:
          type: string
          description: The ID of the application to shortlist
      type: object
    RejectApplicationRequest:
      description: Request to Reject an Application
      properties:
        application_id:
          type: string
          description: The ID of the application to reject
      type: object
    ApplicationLabelColor:
      type: string
      enum:
        - RED
        - GREEN
        - BLUE
        - MAGENTA
    FilterApplicationsRequest:
      description: Request to get a list of applications for an Opening. If search_prefix or opening_id is provided, results matching either of them (ANY) will be returned. Results will be ordered by application_id.
      properties:
        application_state:
          $ref: "#/components/schemas/ApplicationState"
          default: APPLIED
        opening_id:
          type: string
          description: The ID of the opening
        search_prefix:
          type: string
          description: The prefix for case insensitive search on either the Applicant name or the current company
          example: jeff google
        color_filters:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationLabelColor"
          description: The color filters to apply to the applications. ANY of the given colors will be selected as a match.
        limit:
          type: integer
          description: Number of applications to return
          minimum: 1
          maximum: 100
          default: 50
        offset:
          type: string
          description: The application_id to start the list from
      type: object
      required:
        - opening_id
    VouchState:
      type: string
      enum:
        - SOUGHT
        - VOUCHED
        - REJECTED
    Vouch:
      description: Details of a Vouch
      properties:
        voucher_name:
          type: string
        voucher_vetchi_handle:
          type: string
        voucher_current_position:
          type: string
        voucher_current_company:
          type: string
        vouch_state:
          $ref: "#/components/schemas/VouchState"
    ApplicationState:
      type: string
      enum:
        - APPLIED
        - SHORTLISTED
        - REJECTED
    FilteredApplication:
      description: An Application that matches the filters
      properties:
        application_id:
          type: string
        applicant_name:
          type: string
        last_company:
          type: string
        last_position:
          type: string
        vetchi_handle:
          type: string
        color_filters:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationLabelColor"
        resume_url:
          type: string
          description: The URL to the applicant's resume
        vouches:
          type: array
          items:
            $ref: "#/components/schemas/Vouch"
        referred_by:
          type: object
          description: The user who referred the applicant
          properties:
            name:
              type: string
            email:
              type: string
              description: The email of the user who referred the applicant as stored under the Employer => User in the employer website. This can be different than the public or personal email used on the vetchi website.
    AddLocationRequest:
      description: Request to add a new location
      properties:
        country:
          type: string
          minLength: 3
          maxLength: 168
        state:
          type: string
          minLength: 3
          maxLength: 168
        city:
          type: string
          minLength: 3
          maxLength: 168
        postal_address:
          type: string
          minLength: 3
          maxLength: 168
      required:
        - country
        - state
        - city
        - postal_address
      type: object
    AddLocationResponse:
      description: Response after adding a location
      properties:
        location_id:
          type: string
      type: object
    AddUserRequest:
      description: Request to add a new user
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      required:
        - name
        - email
        - role
      type: object
    AddUserResponse:
      description: Response after adding a user
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
      type: object
    JobType:
      type: string
      enum:
        - FULL_TIME
        - PART_TIME
        - CONTRACT
        - INTERNSHIP
        - UNSPECIFIED
      description: Type of job
    CreateOpeningRequest:
      description: Request to create a new opening
      type: object
      properties:
        title:
          type: string
          description: The job title
          example: Senior Staff Engineer
        positions:
          type: integer
          description: Number of positions available
          minimum: 1
          maximum: 100
        jd:
          type: string
          description: Detailed job description in markdown format
          minLength: 10
          maxLength: 10000
          example: |
            **Responsibilities**
            * Architecting and developing web, software, mobile apps, prototypes, or proofs of concepts (POC’s)
            * Leading the gathering of functional requirements, developing technical specifications, and project & test planning
            * Acting as the technical subject matter expert: Mentoring fellow engineers, demonstrating technical expertise, and leading a small team solving challenging programming and design problems
            * Roughly 40-60% hands-on coding
            * Generate technical documentation and PowerPoint presentations to communicate architectural and design options, and educate development teams and business users
            * Work cross-functionally with various teams including: product management, various product lines, and/or business units to drive forward results
            * Demonstrate a passion for developing well architected, elegant, web and/or mobile apps
            * Experience with Agile Development, SCRUM, or Extreme Programming methodologies

            **Qualifications**

            * 8+ years experience designing and developing web, software, or mobile applications.
            * Strong leadership experience: Leading meetings, presenting, technical go to person, and cross-functional leader.
            * BS/MS in computer science or equivalent work experience.
            * Expertise with any of the following Object Oriented Languages (OOD): Java/J2EE.
            * Expertise with the entire Software Development Life Cycle (SDLC).
            * 3+ years experience with web services (consuming or creating) with REST.
            * Excellent communication skills: Demonstrated ability to explain complex technical issues to both technical and non-technical audiences.
            * Expertise in the Software design/architecture process.
            * Expertise with unit testing & Test Driven Development (TDD).
            * Business Acumen - strategic thinking & strategy development.
            * Building strong teams - set and evangelize vision, facilitative leadership, attract and retain key talent.
        job_type:
          $ref: "#/components/schemas/JobType"
          description: Job type
        recruiter:
          type: string
          format: email
          description: Recruiter for the job
          example: recruiter.bob@example.com
        hiring_manager:
          type: string
          format: email
          description: Hiring manager for the job
          example: hiringmanager.alice@example.com
        onsite_location_ids:
          type: array
          items:
            type: string
          description: List of location_ids for the onsite locations that are admissible for this opening
        remote_locations_countries:
          type: array
          items:
            type: string
          description: Remote locations by countries
        remote_locations_timezones:
          type: array
          items:
            type: string
          description: Remote locations by timezones
        yoe_min:
          type: integer
          description: Minimum years of experience
          minimum: 0
          maximum: 80
          example: 8
        yoe_max:
          type: integer
          description: Maximum years of experience
          minimum: 0
          maximum: 80
        educational_qualification:
          $ref: "#/components/schemas/EducationalQualification"

        currency:
          type: string
          description: Currency for the salary
          example: USD
        salary_range_min:
          type: number
          description: Minimum salary
          minimum: 1
          example: 175000
        salary_range_max:
          type: number
          description: Maximum salary
          minimum: 2
          example: 200000
        cost_center_id:
          type: string
          description: Cost Center / Department for the job
        notes:
          type: string
          description: Additional notes
        potential_team_mates_ids:
          type: array
          items:
            type: string
          description: List of potential team mates ids
        max_hops:
          type: integer
          description: Maximum hops upto which people in potential team mates network can apply
          minimum: 2
          maximum: 5
        internal_only:
          type: boolean
          default: false
          description: If true, the opening will not be visible to the public
      required:
        - title
        - positions
        - job_type
        - jd
        - educational_qualification
        - yoe_min
        - yoe_max
        - recruiter
        - hiring_manager
    ClientId:
      description: The client ID, usually a website domain
      example: example.com
      maxLength: 255
      minLength: 3
      type: string
    EducationalQualification:
      description: Educational qualification
      enum:
        - UNDER_GRADUATE
        - POST_GRADUATE
        - DOCTORATE
        - DOESNT_MATTER
        - UNSPECIFIED
    EmailAddress:
      description: An email address
      example: test@example.com
      format: email
      maxLength: 255
      minLength: 3
      pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
      type: string
    EmployerSignInRequest:
      properties:
        client_id:
          $ref: "#/components/schemas/ClientId"
          description: The client ID
        email:
          $ref: "#/components/schemas/EmailAddress"
          description: The email
        password:
          $ref: "#/components/schemas/Password"
          description: The password
      type: object
    EmployerSignInResponse:
      properties:
        expiresAt:
          format: date-time
          type: string
        token:
          description: The authentication token
          type: string
      type: object
    FilterEmployeesRequest:
      properties:
        prefix:
          type: string
          description: The prefix to filter by. The filtering is case insensitive and will match any part of the name or email.
          minLength: 3
          maxLength: 255
    FilteredEmployee:
      description: Filtered employee
      example:
        - name: John Doe
          email: john.doe@example.com
          vetchiHandle: johndoe
        - name: Jane Smith
          email: jane.smith@example.com
          vetchiHandle: janesmith-123123
    FilterOpeningsRequest:
      properties:
        hiring_manager_emails:
          description: Any Opening with any of the given HiringManager emails will be returned
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
        limit:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        offset:
          maxLength: 255
          minLength: 1
          type: string
        order_by:
          default:
            - created_at
            - department
            - unfilled_count
            - recruiter_email
            - hiring_manager_email
          description: The order by field
          items:
            enum:
              - created_at
              - department
              - unfilled_count
              - hiring_manager_email
              - recruiter_email
            type: string
          type: array
        order_direction:
          default: desc
          description: The order direction
          enum:
            - asc
            - desc
          type: string
        recruiter_emails:
          description: Any Opening with any of the given Recruiter emails will be returned
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
    FilteredOpenings:
      description: The filtered openings
      example:
        - department_id: "1"
          department_name: Engineering
          hiring_manager_email: hiring_manager@example.com
          hiring_manager_name: John Doe
          id: JAN14-1
          recruiter_email: recruiter@example.com
          recruiter_name: Jane Doe
          status: ACTIVE
          title: Software Engineer
        - department_id: "2"
          department_name: Product
          hiring_manager_email: hiring_manager2@example.com
          hiring_manager_name: John Smith
          id: JAN14-2
          recruiter_email: recruiter2@example.com
          recruiter_name: Jane Smith
          status: DRAFT
          title: Product Manager
        - department_id: "3"
          department_name: Data Science
          hiring_manager_email: hiring_manager3@example.com
          hiring_manager_name: John Johnson
          id: JAN14-3
          recruiter_email: recruiter3@example.com
          recruiter_name: Jane Johnson
          status: CLOSED
          title: Data Scientist
      items:
        $ref: "#/components/schemas/OpeningInfo"
      type: array
    FilteredRecruiters:
      description: The filtered recruiters
      example:
        - name: John Doe
          email: john.doe@example.com
        - name: Jane Smith
          email: jane.smith@example.com
      items:
        $ref: "#/components/schemas/User"
      type: array
    FilteredHiringManagers:
      description: The filtered hiring managers
      example:
        - name: John Doe
          email: john.doe@example.com
        - name: Jane Smith
          email: jane.smith@example.com
      items:
        $ref: "#/components/schemas/User"
      type: array
    GetLocationsRequest:
      description: Request to get a list of locations with pagination
      properties:
        limit:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
        offset:
          type: string
      type: object
    GetOnboardStatusRequest:
      properties:
        client_id:
          $ref: "#/components/schemas/ClientId"
          description: The client ID
      type: object
    GetOnboardStatusResponse:
      properties:
        status:
          $ref: "#/components/schemas/OnboardStatus"
      type: object
    GetUserRequest:
      description: Request to get a list of users with pagination
      properties:
        limit:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        offset:
          description: The email address to start the list from
          $ref: "#/components/schemas/EmailAddress"
      type: object
    OnboardStatus:
      description: The onboarding status
      enum:
        - DOMAIN_NOT_VERIFIED
        - DOMAIN_VERIFIED_EMAIL_NOT_SENT
        - DOMAIN_VERIFIED_EMAIL_SENT
        - DOMAIN_ONBOARDED
      type: string
    OpeningInfo:
      description: Information about an opening
      properties:
        department_id:
          description: The department ID
          type: string
        department_name:
          description: The department name
          type: string
        filled_count:
          type: integer
        hiring_manager_email:
          description: The hiring manager email
          format: email
          type: string
        hiring_manager_name:
          description: The hiring manager name
          type: string
        id:
          description: The opening ID
          example: JAN14-1
          type: string
        job_type:
          type: string
        recruiter_email:
          description: The recruiter email
          format: email
          type: string
        recruiter_name:
          description: The recruiter name
          type: string
        status:
          $ref: "#/components/schemas/OpeningStatus"
        title:
          type: string
        unfilled_count:
          type: integer
      type: object
    OpeningStatus:
      description: The status of an opening
      enum:
        - DRAFT
        - ACTIVE
        - CLOSED
      type: string
    Password:
      description: A password
      example: Password123$
      format: password
      maxLength: 255
      minLength: 8
      pattern: ^(?:.*[a-z])(?:.*[A-Z])(?:.*\d)(?:.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
      type: string
    RemoveLocationRequest:
      description: Request to remove a location
      properties:
        location_id:
          type: string
      required:
        - location_id
      type: object
    RemoveUserRequest:
      description: Request to remove a user
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
      required:
        - email
      type: object
    Role:
      description: User roles in the system
      enum:
        - ADMIN
        - RECRUITER
        - PANELIST
      type: string
    User:
      description: A user object
      properties:
        name:
          description: The name of the user
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
      type: object
    UserInfo:
      description: Information about a user
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      type: object
    UserListResponse:
      description: A list of user information, sorted by email address
      items:
        $ref: "#/components/schemas/UserInfo"
      type: array
    ValidationErrors:
      description: A list of field names for which the validations failed
      items:
        type: string
      type: array
    FilterRecruitersRequest:
      type: object
      properties:
        prefix:
          type: string
      required:
        - prefix
    FilterHiringManagersRequest:
      type: object
      properties:
        prefix:
          type: string
      required:
        - prefix
    CostCenter:
      description: A cost center object
      properties:
        cost_center_id:
          type: string
        name:
          type: string
          minLength: 3
          maxLength: 64
        notes:
          type: string
          maxLength: 1024
      type: object
    AddCostCenterRequest:
      description: Request to add a new cost center
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 64
        notes:
          type: string
          maxLength: 1024
      required:
        - name
      type: object
    AddCostCenterResponse:
      description: Response after adding a cost center
      properties:
        cost_center_id:
          type: string
      type: object
    RemoveCostCenterRequest:
      description: Request to remove a cost center
      properties:
        cost_center_id:
          type: string
      required:
        - cost_center_id
      type: object
    GetCostCentersRequest:
      description: Request to get a list of cost centers with pagination
      properties:
        limit:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
        offset:
          type: string
      type: object
    GetCostCentersResponse:
      description: Response containing a list of cost centers
      items:
        $ref: "#/components/schemas/CostCenter"
      type: array
    EditRoleRequest:
      description: Request to edit a user's role
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      required:
        - email
        - role
      type: object
    PutCostCenterRequest:
      description: Request to update an existing cost center
      properties:
        cost_center_id:
          type: string
        name:
          type: string
          minLength: 3
          maxLength: 64
        notes:
          type: string
          maxLength: 1024
      required:
        - cost_center_id
        - name
      type: object

info:
  description: Vetchi APIs that work across multiple clients
  title: Vetchi API
  version: 0.0.1
openapi: 3.0.0
paths:
  /employer/filter-openings:
    post:
      description: Filter Openings for the signedin employer with the given criteria
      operationId: employer-filter-openings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterOpeningsRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredOpenings"
          description: OK
      summary: Get Openings
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-recruiters:
    post:
      description: >
        Accepts a JSON body containing a prefix to match against the name and email addresses of recruiters
        and returns a maximum of 10 results.
      operationId: employer-filter-recruiters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterRecruitersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredRecruiters"
          description: OK
      summary: Filter Recruiters
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-hiring-managers:
    post:
      description: >
        Accepts a JSON body containing a prefix to match against the name and email addresses of hiring managers
        and returns a maximum of 10 results.
      operationId: employer-filter-hiring-managers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterHiringManagersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredHiringManagers"
          description: OK
      summary: Filter Hiring Managers
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-onboard-status:
    post:
      description: Get Onboarded Status for an Employer
      operationId: employer-get-onboard-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetOnboardStatusRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOnboardStatusResponse"
          description: OK
      summary: Get Onboarded Status for a Client
      tags:
        - Employer
  /employer/signin:
    post:
      description: SignIn to the system
      operationId: employer-signin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployerSignInRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployerSignInResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request
        "401":
          description: Unauthorized
      summary: SignIn
      tags:
        - Employer
  /employer/get-users:
    post:
      description: Retrieve a list of users associated with the employer, sorted by their email address.
      operationId: employer-get-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
          description: OK
      summary: Get Users
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-user:
    post:
      description: Add a new user associated with the employer. This is available only for users with the ADMIN role.
      operationId: employer-add-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
          description: User added successfully
        "409":
          description: Conflict - User already exists with the same email
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request - Validation errors
      summary: Add User
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/remove-user:
    post:
      description: Remove a user associated with the employer. This method is available only for users with the ADMIN role.
      operationId: employer-remove-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveUserRequest"
        required: true
      responses:
        "200":
          description: User removed successfully or user not found
      summary: Remove User
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-location:
    post:
      description: Add a new location. This method is available only for users with the ADMIN role.
      operationId: employer-add-location
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddLocationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddLocationResponse"
          description: Location added successfully
      summary: Add Location
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-locations:
    post:
      description: Get a list of locations with pagination. This method is available only for users with the ADMIN role.
      operationId: employer-get-locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLocationsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    location_id:
                      type: string
                    country:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    postal_address:
                      type: string
          description: OK
      summary: Get Locations
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/remove-location:
    post:
      description: Remove a location. This method is available only for users with the ADMIN role. Removing a location will not remove any openings associated with it. The openings will continue to point to the old location. It will just not show up in the list of locations and future openings.
      operationId: employer-remove-location
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveLocationRequest"
        required: true
      responses:
        "200":
          description: Location removed successfully or location not found
      summary: Remove Location
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-cost-center:
    post:
      description: Add a new cost center. This method is available only for users with the ADMIN role.
      operationId: employer-add-cost-center
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCostCenterRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddCostCenterResponse"
          description: Cost center added successfully
      summary: Add Cost Center
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-cost-centers:
    post:
      description: Get a list of cost centers with pagination.
      operationId: employer-get-cost-centers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCostCentersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostCenter"
          description: OK
      summary: Get Cost Centers
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/remove-cost-center:
    post:
      description: Remove a cost center. This method is available only for users with the ADMIN role. Removing a cost center will not remove any openings associated with it. The openings will continue to point to the old cost center. It will just not show up in the list of cost centers and future openings.
      operationId: employer-remove-cost-center
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveCostCenterRequest"
        required: true
      responses:
        "200":
          description: Cost center removed successfully or cost center not found.
      summary: Remove Cost Center
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/edit-user-role:
    post:
      description: Edit the role of a user associated with the employer. ADMIN role cannot be changed for the last admin. This method is available only for users with the ADMIN role.
      operationId: employer-edit-user-role
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditRoleRequest"
        required: true
      responses:
        "200":
          description: Role updated successfully
        "404":
          description: User not found
      summary: Edit User Role
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/put-cost-center:
    post:
      description: Update an existing cost center. This method is available only for users with the ADMIN role.
      operationId: employer-put-cost-center
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutCostCenterRequest"
        required: true
      responses:
        "200":
          description: Cost center updated successfully
        "404":
          description: Cost center not found
      summary: Update Cost Center
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/create-opening:
    post:
      description: Create a new Job Opening. This method is available only for users with the ADMIN role.
      operationId: employer-create-opening
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOpeningRequest"
        required: true
      responses:
        "200":
          description: Opening created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request - Validation errors
      summary: Create Opening
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-employees:
    post:
      description: An API to use for autocompleting employees of the given organization, where the user personal vetchi handle is also obtained.
      operationId: employer-filter-employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterEmployeesRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredEmployee"
      summary: Filter Employees
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-applications:
    post:
      description: Get a list of applications for a given opening.
      operationId: employer-filter-applications
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterApplicationsRequest"
      responses:
        "200":
          description: "List of Applications that match the filter"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredApplication"
      summary: Filter Applications
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/reject-application:
    post:
      description: Reject an application for a given opening.
      operationId: employer-reject-application
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RejectApplicationRequest"
        required: true
      responses:
        "200":
          description: Application rejected successfully
        "409":
          description: If the Application could not be rejected for some reason, for example the Application is already Shortlisted in parallel.
      summary: Reject Application
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/shortlist-application:
    post:
      description: Shortlist an application for a given opening.
      operationId: employer-shortlist-application
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShortlistApplicationRequest"
        required: true
      responses:
        "200":
          description: Application shortlisted successfully. TODO Should we return the candidacy_id ?
        "409":
          description: If the Application could not be shortlisted for some reason, for example the Application is already Rejected in parallel.
      summary: Shortlist Application
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-candidates:
    post:
      description: Filter candidates based on various criteria and ordered by candidacy_id
      operationId: employer-filter-candidates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterCandidatesRequest"
        required: true
      responses:
        "200":
          description: List of candidates that match the filter
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredCandidate"
      summary: Filter Candidates
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-candidacy:
    post:
      description: Get candidacy details for a given candidacy_id.
      operationId: employer-get-candidacy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCandidacyRequest"
        required: true
      responses:
        "200":
          description: Candidacy details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Candidacy"
      summary: Get Candidacy
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/create-interview:
    post:
      description: Create a new interview for a given candidacy_id.
      operationId: employer-create-interview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInterviewRequest"
        required: true
      responses:
        "200":
          description: Interview created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateInterviewResponse"
        "400":
          description: Bad Request - Validation errors
      summary: Create Interview
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-interview-details:
    post:
      description: Get interview details for a given interview_id.
      operationId: employer-get-interview-details
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetInterviewDetailsRequest"
        required: true
      responses:
        "200":
          description: Interview details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterviewDetails"
      summary: Get Interview Details
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/update-interview-feedback:
    post:
      description: Update the feedback for an interview.
      operationId: employer-update-interview-feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInterviewFeedbackRequest"
        required: true
      responses:
        "200":
          description: Interview feedback updated successfully
        "400":
          description: Bad Request - Validation errors
      summary: Update Interview Feedback
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/cancel-interview:
    post:
      description: Cancel an interview for a given interview_id.
      operationId: employer-cancel-interview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelInterviewRequest"
        required: true
      responses:
        "200":
          description: Interview marked as Cancelled
      summary: Cancel Interview
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/change-password:
    post:
      description: Change the password for the current employer.
      operationId: employer-change-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        required: true
      responses:
        "200":
          description: Password changed successfully
      summary: Change Password
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/forgot-password:
    post:
      description: Send a password reset email to the given email address, if the email address is associated with an account. This API will be a no-op for email addresses that are not associated with an account. This API will be a no-op for email addresses that belong to an Organization that has set up SSO.
      operationId: employer-forgot-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
        required: true
      responses:
        "200":
          description: Password reset email sent successfully
      summary: Forgot Password
      tags:
        - Employer
  /employer/reset-password:
    post:
      description: Reset the password for the given token.
      operationId: employer-reset-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
        required: true
      responses:
        "200":
          description: Password reset successfully
      summary: Reset Password
      tags:
        - Employer
    get:
      description: Show a HTML page with a form to reset the password for the given token.
      operationId: employer-reset-password-page
      parameters:
        - name: token
          in: query
          description: The token to reset the password
          required: true
          schema:
            type: string
      responses:
        "200":
          description: HTML page with a form to reset the password
          content:
            text/html:
              schema:
                type: string
      summary: Reset Password Page
      tags:
        - Employer

  #### hub things below

  /hub/login:
    post:
      description: Login to the social network
      operationId: hub-login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Unauthorized - Invalid credentials
      summary: Login
      tags:
        - Hub
  /hub/tfa:
    post:
      summary: Two Factor Authentication
      tags:
        - Hub
      description: Two factor authentication with the code sent to the email address
      operationId: hub-tfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TFAuthRequest"
      responses:
        "200":
          description: TFA successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TFAuthResponse"
        "401":
          description: Unauthorized - Invalid credentials
      security:
        - TFAuth: []
  /hub/logout:
    post:
      description: Logout from the social network
      operationId: hub-logout
      responses:
        "200":
          description: Logout successful
      summary: Logout
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/vetchi-handle:
    get:
      description: Get the vetchi handle for the loggedin user
      operationId: hub-vetchi-handle
      responses:
        "200":
          description: Vetchi handle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VetchiHandle"
      summary: Get Vetchi Handle of the loggedin user
      tags:
        - Hub
      security:
        - HubAuth: []
    put:
      description: Update the vetchi handle for the loggedin user
      operationId: hub-update-vetchi-handle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VetchiHandle"
        required: true
      responses:
        "200":
          description: Vetchi handle updated successfully
        "400":
          description: Bad Request - Validation errors. In future, we may have different error codes for different tiers of users as the field limits (3 letter handle) may change.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
      summary: Update Vetchi Handle
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/check-handle-availability:
    get:
      description: Check if a vetchi handle is available
      operationId: hub-check-handle-availability
      parameters:
        - name: handle
          in: query
          description: Check if handle is available. Having this as query param instead of request body is to help with caching.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Vetchi handle is available
      summary: Check Vetchi Handle Availability
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/auto-biography:
    get:
      description: Get the auto-biography for the loggedin user
      operationId: hub-auto-biography
      responses:
        "200":
          description: Auto-biography
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoBiography"
      summary: Get Auto-biography
      tags:
        - Hub
      security:
        - HubAuth: []
    put:
      description: Update the auto-biography for the loggedin user
      operationId: hub-update-auto-biography
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutoBiography"
        required: true
      responses:
        "200":
          description: Auto-biography updated successfully
        "400":
          description: Bad Request - Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
      summary: Update Auto-biography
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/profile-picture:
    get:
      description: Get the profile picture for the loggedin user
      operationId: hub-get-profile-picture
      responses:
        "200":
          description: Profile picture
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      summary: Get Profile Picture
      tags:
        - Hub
      security:
        - HubAuth: []
    put:
      description: Update the profile picture for the loggedin user
      operationId: hub-update-profile-picture
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Profile picture updated successfully
      summary: Update Profile Picture
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/work-history:
    get:
      description: Get the work history for the loggedin user
      operationId: hub-get-work-history
      responses:
        "200":
          description: Work history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkHistory"
      summary: Get Work History
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/add-work-history:
    post:
      description: Add a new work history for the loggedin user
      operationId: hub-add-work-history
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddWorkHistoryRequest"
        required: true
      responses:
        "200":
          description: Work history added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddWorkHistoryResponse"
      summary: Add Work History
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/remove-work-history:
    post:
      description: Remove a work history for the loggedin user
      operationId: hub-remove-work-history
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveWorkHistoryRequest"
        required: true
      responses:
        "200":
          description: Work history removed successfully
      summary: Remove Work History
      tags:
        - Hub
      security:
        - HubAuth: []
  /hub/update-work-history:
    put:
      description: Update a work history for the loggedin user
      operationId: hub-update-work-history
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkHistoryRequest"
        required: true
      responses:
        "200":
          description: Work history updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWorkHistoryResponse"
      summary: Update Work History
      tags:
        - Hub
      security:
        - HubAuth: []
