---
# Vetchi OpenAPI Specification
# Remember to sort this yaml file alphabetically by keys after making changes
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants admin access

  schemas:
    ClientId:
      description: The client ID, usually a website domain
      example: example.com
      maxLength: 255
      minLength: 3
      type: string
    EmailAddress:
      description: An email address
      example: test@example.com
      format: email
      maxLength: 255
      minLength: 3
      pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
      type: string
    EmployerSignInRequest:
      properties:
        client_id:
          $ref: "#/components/schemas/ClientId"
          description: The client ID
        email:
          $ref: "#/components/schemas/EmailAddress"
          description: The email
        password:
          $ref: "#/components/schemas/Password"
          description: The password
      type: object
    EmployerSignInResponse:
      properties:
        expiresAt:
          format: date-time
          type: string
        token:
          description: The authentication token
          type: string
      type: object
    FilterOpeningsRequest:
      properties:
        hiring_manager_emails:
          description: Any Opening with any of the given HiringManager emails will be returned
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
        limit:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        offset:
          maxLength: 255
          minLength: 1
          type: string
        order_by:
          default:
            - created_at
            - department
            - unfilled_count
            - recruiter_email
            - hiring_manager_email
          description: The order by field
          items:
            enum:
              - created_at
              - department
              - unfilled_count
              - hiring_manager_email
              - recruiter_email
            type: string
          type: array
        order_direction:
          default: desc
          description: The order direction
          enum:
            - asc
            - desc
          type: string
        recruiter_emails:
          description: Any Opening with any of the given Recruiter emails will be returned
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
    FilteredOpenings:
      description: The filtered openings
      example:
        - department_id: "1"
          department_name: Engineering
          hiring_manager_email: hiring_manager@example.com
          hiring_manager_name: John Doe
          id: JAN14-1
          recruiter_email: recruiter@example.com
          recruiter_name: Jane Doe
          status: ACTIVE
          title: Software Engineer
        - department_id: "2"
          department_name: Product
          hiring_manager_email: hiring_manager2@example.com
          hiring_manager_name: John Smith
          id: JAN14-2
          recruiter_email: recruiter2@example.com
          recruiter_name: Jane Smith
          status: DRAFT
          title: Product Manager
        - department_id: "3"
          department_name: Data Science
          hiring_manager_email: hiring_manager3@example.com
          hiring_manager_name: John Johnson
          id: JAN14-3
          recruiter_email: recruiter3@example.com
          recruiter_name: Jane Johnson
          status: CLOSED
          title: Data Scientist
      items:
        $ref: "#/components/schemas/OpeningInfo"
      type: array
    FilteredRecruiters:
      description: The filtered recruiters
      example:
        - name: John Doe
          email: john.doe@example.com
        - name: Jane Smith
          email: jane.smith@example.com
      items:
        $ref: "#/components/schemas/User"
      type: array
    FilteredHiringManagers:
      description: The filtered hiring managers
      example:
        - name: John Doe
          email: john.doe@example.com
        - name: Jane Smith
          email: jane.smith@example.com
      items:
        $ref: "#/components/schemas/User"
      type: array
    GetOnboardStatusRequest:
      properties:
        client_id:
          $ref: "#/components/schemas/ClientId"
          description: The client ID
      type: object
    GetOnboardStatusResponse:
      properties:
        status:
          $ref: "#/components/schemas/OnboardStatus"
      type: object
    OnboardStatus:
      description: The onboarding status
      enum:
        - DOMAIN_NOT_VERIFIED
        - DOMAIN_VERIFIED_EMAIL_NOT_SENT
        - DOMAIN_VERIFIED_EMAIL_SENT
        - DOMAIN_ONBOARDED
      type: string
    OpeningInfo:
      description: Information about an opening
      properties:
        department_id:
          description: The department ID
          type: string
        department_name:
          description: The department name
          type: string
        filled_count:
          type: integer
        hiring_manager_email:
          description: The hiring manager email
          format: email
          type: string
        hiring_manager_name:
          description: The hiring manager name
          type: string
        id:
          description: The opening ID
          example: JAN14-1
          type: string
        job_type:
          type: string
        recruiter_email:
          description: The recruiter email
          format: email
          type: string
        recruiter_name:
          description: The recruiter name
          type: string
        status:
          $ref: "#/components/schemas/OpeningStatus"
        title:
          type: string
        unfilled_count:
          type: integer
      type: object
    OpeningStatus:
      description: The status of an opening
      enum:
        - DRAFT
        - ACTIVE
        - CLOSED
      type: string
    Password:
      description: A password
      example: Password123$
      format: password
      maxLength: 255
      minLength: 8
      pattern: ^(?:.*[a-z])(?:.*[A-Z])(?:.*\d)(?:.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
      type: string
    Role:
      description: User roles in the system
      enum:
        - ADMIN
        - RECRUITER
        - PANELIST
      type: string
    User:
      description: A user object
      properties:
        name:
          description: The name of the user
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
      type: object
    UserInfo:
      description: Information about a user
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      type: object
    UserListResponse:
      description: A list of user information, sorted by email address
      items:
        $ref: "#/components/schemas/UserInfo"
      type: array
    ValidationErrors:
      description: A list of field names for which the validations failed
      items:
        type: string
      type: array
    AddUserRequest:
      description: Request to add a new user
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      required:
        - name
        - email
        - role
      type: object
    AddUserResponse:
      description: Response after adding a user
      properties:
        user_id:
          type: string
      type: object
    GetUserRequest:
      description: Request to get a list of users with pagination
      properties:
        limit:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        offset:
          description: The email address to start the list from
          $ref: "#/components/schemas/EmailAddress"
      type: object

info:
  description: Vetchi APIs that work across multiple clients
  title: Vetchi API
  version: 0.0.1
openapi: 3.0.0
paths:
  /employer/filter-openings:
    post:
      description: Filter Openings for the signedin employer with the given criteria
      operationId: employer-filter-openings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterOpeningsRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredOpenings"
          description: OK
      summary: Get Openings
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-recruiters:
    get:
      description: >
        Match the passed input query param value against the name and email addresses of recruiters
        and return a maximum of 10 results.
      operationId: employer-filter-recruiters
      parameters:
        - name: prefix
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredRecruiters"
          description: OK
      summary: Filter Recruiters
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-hiring-managers:
    get:
      description: >
        Match the passed input query param value against the name and email addresses of hiring managers
        and return a maximum of 10 results.
      operationId: employer-filter-hiring-managers
      parameters:
        - name: prefix
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredHiringManagers"
          description: OK
      summary: Filter Hiring Managers
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-onboard-status:
    post:
      description: Get Onboarded Status for an Employer
      operationId: employer-get-onboard-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetOnboardStatusRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOnboardStatusResponse"
          description: OK
      summary: Get Onboarded Status for a Client
      tags:
        - Employer
  /employer/signin:
    post:
      description: SignIn to the system
      operationId: employer-signin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployerSignInRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployerSignInResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request
        "401":
          description: Unauthorized
      summary: SignIn
      tags:
        - Employer
  /employer/users:
    post:
      description: Retrieve a list of users associated with the employer, sorted by their email address.
      operationId: employer-get-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
          description: OK
      summary: Get Users
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-user:
    post:
      description: Add a new user associated with the employer.
      operationId: employer-add-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
          description: User added successfully
        "409":
          description: Conflict - User already exists with the same email
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request - Validation errors
      summary: Add User
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []