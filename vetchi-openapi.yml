---
# Vetchi OpenAPI Specification
# Remember to sort this yaml file alphabetically by keys after making changes
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants admin access

  schemas:
    AddLocationRequest:
      description: Request to add a new location
      properties:
        country:
          type: string
          minLength: 3
          maxLength: 168
        state:
          type: string
          minLength: 3
          maxLength: 168
        city:
          type: string
          minLength: 3
          maxLength: 168
        postal_address:
          type: string
          minLength: 3
          maxLength: 168
      required:
        - country
        - state
        - city
        - postal_address
      type: object
    AddLocationResponse:
      description: Response after adding a location
      properties:
        location_id:
          type: string
      type: object
    AddUserRequest:
      description: Request to add a new user
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      required:
        - name
        - email
        - role
      type: object
    AddUserResponse:
      description: Response after adding a user
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
      type: object
    JobType:
      type: string
      enum:
        - FULL_TIME
        - PART_TIME
        - CONTRACT
        - INTERNSHIP
        - UNSPECIFIED
      description: Type of job
    CreateOpeningRequest:
      description: Request to create a new opening
      type: object
      properties:
        title:
          type: string
          description: The job title
        positions:
          type: integer
          description: Number of positions available
        jd:
          type: string
          description: Job description
        job_type:
          $ref: "#/components/schemas/JobType"
          description: Job type
        recruiter:
          type: string
          format: email
          description: Recruiter for the job
        hiring_manager:
          type: string
          format: email
          description: Hiring manager for the job
        onsite_location_ids:
          type: array
          items:
            type: string
          description: List of location_ids for the onsite locations that are admissible for this opening
        remote_locations_countries:
          type: array
          items:
            type: string
          description: Remote locations by countries
        remote_locations_timezones:
          type: array
          items:
            type: string
          description: Remote locations by timezones
        yoe_min:
          type: integer
          description: Minimum years of experience
          minimum: 0
          maximum: 80
        yoe_max:
          type: integer
          description: Maximum years of experience
          minimum: 0
          maximum: 80
        educational_qualification:
          $ref: "#/components/schemas/EducationalQualification"
        currency:
          type: string
          description: Currency for the salary
        salary_min:
          type: number
          description: Minimum salary
        salary_max:
          type: number
          description: Maximum salary
        cost_center_id:
          type: string
          description: Cost Center / Department for the job
        notes:
          type: string
          description: Additional notes
        potential_team_mates_ids:
          type: array
          items:
            type: string
          description: List of potential team mates ids
        max_hops:
          type: integer
          description: Maximum hops to allow to apply from the potential team mates network
          minimum: 2
          maximum: 5
        internal_only:
          type: boolean
          default: false
          description: If true, the opening will not be visible to the public
      required:
        - title
        - positions
        - job_type
        - jd
        - educational_qualification
        - yoe_min
        - yoe_max
        - recruiter
        - hiring_manager
    ClientId:
      description: The client ID, usually a website domain
      example: example.com
      maxLength: 255
      minLength: 3
      type: string
    EducationalQualification:
      description: Educational qualification
      enum:
        - BACHELORS
        - MASTERS
        - DOCTORATE
        - DOESNT_MATTER
        - UNSPECIFIED
    EmailAddress:
      description: An email address
      example: test@example.com
      format: email
      maxLength: 255
      minLength: 3
      pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
      type: string
    EmployerSignInRequest:
      properties:
        client_id:
          $ref: "#/components/schemas/ClientId"
          description: The client ID
        email:
          $ref: "#/components/schemas/EmailAddress"
          description: The email
        password:
          $ref: "#/components/schemas/Password"
          description: The password
      type: object
    EmployerSignInResponse:
      properties:
        expiresAt:
          format: date-time
          type: string
        token:
          description: The authentication token
          type: string
      type: object
    FilterOpeningsRequest:
      properties:
        hiring_manager_emails:
          description: Any Opening with any of the given HiringManager emails will be returned
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
        limit:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        offset:
          maxLength: 255
          minLength: 1
          type: string
        order_by:
          default:
            - created_at
            - department
            - unfilled_count
            - recruiter_email
            - hiring_manager_email
          description: The order by field
          items:
            enum:
              - created_at
              - department
              - unfilled_count
              - hiring_manager_email
              - recruiter_email
            type: string
          type: array
        order_direction:
          default: desc
          description: The order direction
          enum:
            - asc
            - desc
          type: string
        recruiter_emails:
          description: Any Opening with any of the given Recruiter emails will be returned
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
    FilteredOpenings:
      description: The filtered openings
      example:
        - department_id: "1"
          department_name: Engineering
          hiring_manager_email: hiring_manager@example.com
          hiring_manager_name: John Doe
          id: JAN14-1
          recruiter_email: recruiter@example.com
          recruiter_name: Jane Doe
          status: ACTIVE
          title: Software Engineer
        - department_id: "2"
          department_name: Product
          hiring_manager_email: hiring_manager2@example.com
          hiring_manager_name: John Smith
          id: JAN14-2
          recruiter_email: recruiter2@example.com
          recruiter_name: Jane Smith
          status: DRAFT
          title: Product Manager
        - department_id: "3"
          department_name: Data Science
          hiring_manager_email: hiring_manager3@example.com
          hiring_manager_name: John Johnson
          id: JAN14-3
          recruiter_email: recruiter3@example.com
          recruiter_name: Jane Johnson
          status: CLOSED
          title: Data Scientist
      items:
        $ref: "#/components/schemas/OpeningInfo"
      type: array
    FilteredRecruiters:
      description: The filtered recruiters
      example:
        - name: John Doe
          email: john.doe@example.com
        - name: Jane Smith
          email: jane.smith@example.com
      items:
        $ref: "#/components/schemas/User"
      type: array
    FilteredHiringManagers:
      description: The filtered hiring managers
      example:
        - name: John Doe
          email: john.doe@example.com
        - name: Jane Smith
          email: jane.smith@example.com
      items:
        $ref: "#/components/schemas/User"
      type: array
    GetLocationsRequest:
      description: Request to get a list of locations with pagination
      properties:
        limit:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
        offset:
          type: string
      type: object
    GetOnboardStatusRequest:
      properties:
        client_id:
          $ref: "#/components/schemas/ClientId"
          description: The client ID
      type: object
    GetOnboardStatusResponse:
      properties:
        status:
          $ref: "#/components/schemas/OnboardStatus"
      type: object
    GetUserRequest:
      description: Request to get a list of users with pagination
      properties:
        limit:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        offset:
          description: The email address to start the list from
          $ref: "#/components/schemas/EmailAddress"
      type: object
    OnboardStatus:
      description: The onboarding status
      enum:
        - DOMAIN_NOT_VERIFIED
        - DOMAIN_VERIFIED_EMAIL_NOT_SENT
        - DOMAIN_VERIFIED_EMAIL_SENT
        - DOMAIN_ONBOARDED
      type: string
    OpeningInfo:
      description: Information about an opening
      properties:
        department_id:
          description: The department ID
          type: string
        department_name:
          description: The department name
          type: string
        filled_count:
          type: integer
        hiring_manager_email:
          description: The hiring manager email
          format: email
          type: string
        hiring_manager_name:
          description: The hiring manager name
          type: string
        id:
          description: The opening ID
          example: JAN14-1
          type: string
        job_type:
          type: string
        recruiter_email:
          description: The recruiter email
          format: email
          type: string
        recruiter_name:
          description: The recruiter name
          type: string
        status:
          $ref: "#/components/schemas/OpeningStatus"
        title:
          type: string
        unfilled_count:
          type: integer
      type: object
    OpeningStatus:
      description: The status of an opening
      enum:
        - DRAFT
        - ACTIVE
        - CLOSED
      type: string
    Password:
      description: A password
      example: Password123$
      format: password
      maxLength: 255
      minLength: 8
      pattern: ^(?:.*[a-z])(?:.*[A-Z])(?:.*\d)(?:.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
      type: string
    RemoveLocationRequest:
      description: Request to remove a location
      properties:
        location_id:
          type: string
      required:
        - location_id
      type: object
    RemoveUserRequest:
      description: Request to remove a user
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
      required:
        - email
      type: object
    Role:
      description: User roles in the system
      enum:
        - ADMIN
        - RECRUITER
        - PANELIST
      type: string
    User:
      description: A user object
      properties:
        name:
          description: The name of the user
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
      type: object
    UserInfo:
      description: Information about a user
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      type: object
    UserListResponse:
      description: A list of user information, sorted by email address
      items:
        $ref: "#/components/schemas/UserInfo"
      type: array
    ValidationErrors:
      description: A list of field names for which the validations failed
      items:
        type: string
      type: array
    FilterRecruitersRequest:
      type: object
      properties:
        prefix:
          type: string
      required:
        - prefix
    FilterHiringManagersRequest:
      type: object
      properties:
        prefix:
          type: string
      required:
        - prefix
    CostCenter:
      description: A cost center object
      properties:
        cost_center_id:
          type: string
        name:
          type: string
          minLength: 3
          maxLength: 64
        notes:
          type: string
          maxLength: 1024
      type: object
    AddCostCenterRequest:
      description: Request to add a new cost center
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 64
        notes:
          type: string
          maxLength: 1024
      required:
        - name
      type: object
    AddCostCenterResponse:
      description: Response after adding a cost center
      properties:
        cost_center_id:
          type: string
      type: object
    RemoveCostCenterRequest:
      description: Request to remove a cost center
      properties:
        cost_center_id:
          type: string
      required:
        - cost_center_id
      type: object
    GetCostCentersRequest:
      description: Request to get a list of cost centers with pagination
      properties:
        limit:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
        offset:
          type: string
      type: object
    GetCostCentersResponse:
      description: Response containing a list of cost centers
      items:
        $ref: "#/components/schemas/CostCenter"
      type: array
    EditRoleRequest:
      description: Request to edit a user's role
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
        role:
          $ref: "#/components/schemas/Role"
      required:
        - email
        - role
      type: object
    PutCostCenterRequest:
      description: Request to update an existing cost center
      properties:
        cost_center_id:
          type: string
        name:
          type: string
          minLength: 3
          maxLength: 64
        notes:
          type: string
          maxLength: 1024
      required:
        - cost_center_id
        - name
      type: object

info:
  description: Vetchi APIs that work across multiple clients
  title: Vetchi API
  version: 0.0.1
openapi: 3.0.0
paths:
  /employer/filter-openings:
    post:
      description: Filter Openings for the signedin employer with the given criteria
      operationId: employer-filter-openings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterOpeningsRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredOpenings"
          description: OK
      summary: Get Openings
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-recruiters:
    post:
      description: >
        Accepts a JSON body containing a prefix to match against the name and email addresses of recruiters
        and returns a maximum of 10 results.
      operationId: employer-filter-recruiters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterRecruitersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredRecruiters"
          description: OK
      summary: Filter Recruiters
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/filter-hiring-managers:
    post:
      description: >
        Accepts a JSON body containing a prefix to match against the name and email addresses of hiring managers
        and returns a maximum of 10 results.
      operationId: employer-filter-hiring-managers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterHiringManagersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredHiringManagers"
          description: OK
      summary: Filter Hiring Managers
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-onboard-status:
    post:
      description: Get Onboarded Status for an Employer
      operationId: employer-get-onboard-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetOnboardStatusRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOnboardStatusResponse"
          description: OK
      summary: Get Onboarded Status for a Client
      tags:
        - Employer
  /employer/signin:
    post:
      description: SignIn to the system
      operationId: employer-signin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployerSignInRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployerSignInResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request
        "401":
          description: Unauthorized
      summary: SignIn
      tags:
        - Employer
  /employer/get-users:
    post:
      description: Retrieve a list of users associated with the employer, sorted by their email address.
      operationId: employer-get-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
          description: OK
      summary: Get Users
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-user:
    post:
      description: Add a new user associated with the employer. This is available only for users with the ADMIN role.
      operationId: employer-add-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
          description: User added successfully
        "409":
          description: Conflict - User already exists with the same email
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request - Validation errors
      summary: Add User
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/remove-user:
    post:
      description: Remove a user associated with the employer. This method is available only for users with the ADMIN role.
      operationId: employer-remove-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveUserRequest"
        required: true
      responses:
        "200":
          description: User removed successfully or user not found
      summary: Remove User
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-location:
    post:
      description: Add a new location. This method is available only for users with the ADMIN role.
      operationId: employer-add-location
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddLocationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddLocationResponse"
          description: Location added successfully
      summary: Add Location
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []

  /employer/get-locations:
    post:
      description: Get a list of locations with pagination. This method is available only for users with the ADMIN role.
      operationId: employer-get-locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLocationsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    location_id:
                      type: string
                    country:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    postal_address:
                      type: string
          description: OK
      summary: Get Locations
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []

  /employer/remove-location:
    post:
      description: Remove a location. This method is available only for users with the ADMIN role. Removing a location will not remove any openings associated with it. The openings will continue to point to the old location. It will just not show up in the list of locations and future openings.
      operationId: employer-remove-location
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveLocationRequest"
        required: true
      responses:
        "200":
          description: Location removed successfully or location not found
      summary: Remove Location
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/add-cost-center:
    post:
      description: Add a new cost center. This method is available only for users with the ADMIN role.
      operationId: employer-add-cost-center
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCostCenterRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddCostCenterResponse"
          description: Cost center added successfully
      summary: Add Cost Center
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/get-cost-centers:
    post:
      description: Get a list of cost centers with pagination.
      operationId: employer-get-cost-centers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCostCentersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostCenter"
          description: OK
      summary: Get Cost Centers
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/remove-cost-center:
    post:
      description: Remove a cost center. This method is available only for users with the ADMIN role. Removing a cost center will not remove any openings associated with it. The openings will continue to point to the old cost center. It will just not show up in the list of cost centers and future openings.
      operationId: employer-remove-cost-center
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveCostCenterRequest"
        required: true
      responses:
        "200":
          description: Cost center removed successfully or cost center not found.
      summary: Remove Cost Center
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/edit-user-role:
    post:
      description: Edit the role of a user associated with the employer. ADMIN role cannot be changed for the last admin. This method is available only for users with the ADMIN role.
      operationId: employer-edit-user-role
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditRoleRequest"
        required: true
      responses:
        "200":
          description: Role updated successfully
        "404":
          description: User not found
      summary: Edit User Role
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/put-cost-center:
    post:
      description: Update an existing cost center. This method is available only for users with the ADMIN role.
      operationId: employer-put-cost-center
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutCostCenterRequest"
        required: true
      responses:
        "200":
          description: Cost center updated successfully
        "404":
          description: Cost center not found
      summary: Update Cost Center
      tags:
        - Employer
      security:
        - BearerAuth: []
        - OAuth2: []
  /employer/create-opening:
    post:
      description: Create a new opening. This method is available only for users with the ADMIN role.
      operationId: employer-create-opening
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOpeningRequest"
        required: true
      responses:
        "200":
          description: Opening created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
          description: Bad Request - Validation errors
      summary: Create Opening
      tags:
        - Employer
